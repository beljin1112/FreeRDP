name: Windows RDP with Custom Credentials

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  rdp-session:
    # NOTE: Switched to 'windows-latest' because GPU runners require a paid GitHub plan.
    # This will run on the standard, free runners.
    runs-on: windows-latest

    # The maximum timeout for jobs on the free plan is 6 hours (360 minutes).
    timeout-minutes: 360

    steps:
      - name: ⚙️ PREVENT SLEEP - Disable Sleep and Hibernate
        run: |
          powercfg /hibernate off
          powercfg /change monitor-timeout-ac 0
          powercfg /change standby-timeout-ac 0
        shell: cmd

      - name: Configure RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall add rule name="Allow RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
        shell: powershell

      - name: ⬇️ MODIFICATION - Create RDP User with a Fixed Password
        run: |
          # Set the desired username and password
          $username = "beljinp"
          $password = "Matram@369"
          
          # Create a secure string for the password
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          # Create the local user with the specified credentials
          New-LocalUser -Name $username -Password $securePass -FullName "RDP User" -Description "Temporary RDP user."
          
          # Add the user to the Administrators and Remote Desktop Users groups
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          
          # Save credentials for the final step to display them
          echo "RDP_USER=$username" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
        shell: powershell

      - name: Install and Connect Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=github-runner-$env:GITHUB_RUN_ID
          
          Start-Sleep -Seconds 10
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          
          if (-not $tsIP) {
            Write-Error "Failed to get Tailscale IP. Check your auth key."
            exit 1
          }
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
        shell: powershell

      - name: 🟢 KEEP ALIVE - Display Connection Info
        run: |
          Write-Host "✅ RDP Session is Ready!"
          Write-Host "=========================="
          Write-Host "Tailscale IP: ${{ env.TAILSCALE_IP }}"
          Write-Host "Username:     ${{ env.RDP_USER }}"
          Write-Host "Password:     ${{ env.RDP_PASSWORD }}"
          Write-Host "=========================="
          Write-Host "This job will continue running for up to 6 hours. To stop it, manually cancel the workflow."
          
          # Loop to keep the runner alive
          while ($true) {
            Start-Sleep -Seconds 300
          }
        shell: powershell
